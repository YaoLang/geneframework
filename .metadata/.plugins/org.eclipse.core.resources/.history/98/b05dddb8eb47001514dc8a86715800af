package org.geneframework.orm.matrix;

import hu.kazocsaba.math.matrix.EigenDecomposition;
import hu.kazocsaba.math.matrix.Matrix;
import hu.kazocsaba.math.matrix.SingularValueDecomposition;
import hu.kazocsaba.math.matrix.SingularityException;
import hu.kazocsaba.math.matrix.SubmatrixAccessor;
import hu.kazocsaba.math.matrix.Vector;

public class GeneMatrix implements Matrix{
	
	private int label;
	private Matrix matrix;
	
	public GeneMatrix(Matrix m,int label){
		assert(m.getColumnCount()>=label):"label must be smaller than matrix col";
		this.label = label;
	}

	@Override
	public double get(int row, int col) {
		
		return matrix.get(row, col);
	}

	@Override
	public double getQuick(int row, int col) {
		
		return matrix.getQuick(row, col);
	}

	@Override
	public void set(int row, int col, double value) {
		
		matrix.set(row, col, value);
	}

	@Override
	public void setQuick(int row, int col, double value) {
		
		matrix.setQuick(row, col, value);
	}

	@Override
	public int getColumnCount() {
		
		return matrix.getColumnCount();
	}

	@Override
	public int getRowCount() {
		
		return matrix.getRowCount();
	}

	@Override
	public Matrix mul(Matrix m) {
		
		return matrix.mul(m);
	}

	@Override
	public Vector mul(Vector v) {
		
		return matrix.mul(v);
	}

	@Override
	public void scale(double c) {
		
		matrix.scale(c);
	}

	@Override
	public void add(Matrix m) {
		
		matrix.add(m);
	}

	@Override
	public void subtract(Matrix m) {
		
		matrix.subtract(m);
	}

	@Override
	public Matrix times(double c) {
		
		return matrix.times(c);
	}

	@Override
	public Matrix plus(Matrix m) {
		
		return matrix.plus(m);
	}

	@Override
	public Matrix minus(Matrix m) {
		
		return matrix.minus(m);
	}

	@Override
	public Matrix getSubmatrix(int row1, int row2, int col1, int col2) {
		
		return matrix.getSubmatrix(row1, row2, col1, col2);
	}

	@Override
	public SubmatrixAccessor getSub() {
		
		return matrix.getSub();
	}

	@Override
	public SubmatrixAccessor viewSub() {
		
		return matrix.viewSub();
	}

	@Override
	public void setSubmatrix(Matrix m, int row, int col) {
		
		matrix.setSubmatrix(m, row, col);
	}

	@Override
	public Matrix inverse() throws SingularityException {
		
		return matrix.inverse();
	}

	@Override
	public Matrix pseudoInverse() {
		
		return matrix.pseudoInverse();
	}

	@Override
	public Matrix transpose() {
		
		return matrix.transpose();
	}

	@Override
	public Matrix transposedView() {
		
		return matrix.transposedView();
	}

	@Override
	public double determinant() {
		
		return matrix.determinant();
	}

	@Override
	public double norm() {
		
		return matrix.norm();
	}

	@Override
	public double error(Matrix m) {
		
		return matrix.error(m);
	}

	@Override
	public void normalize() {
		
		matrix.normalize();
	}

	@Override
	public Matrix normalized() {
		
		return matrix.normalized();
	}

	@Override
	public SingularValueDecomposition svd() {
		
		return matrix.svd();
	}

	@Override
	public EigenDecomposition eig() {
		
		return matrix.eig();
	}
	
	
}
